// using thread synchttronization concept  create  thread synchronition senario where will be consumer and producer which imployes tow method wait() and notify()
package com.cozen;
import java.util.LinkedList;

	class SharedBuffer {
	    private LinkedList<Integer> buffer = new LinkedList<>();
	    private int capacity;

	    public SharedBuffer(int capacity) {
	        this.capacity = capacity;
	    }

	    public void produce() throws InterruptedException {
	        int item = 0;
	        while (true) {
	            synchronized (this) {
	                while (buffer.size() == capacity) {
	                    // Buffer is full, wait for the consumer to consume
	                    wait();
	                }

	                System.out.println("Producer produces: " + item);
	                buffer.add(item++);
	                notify(); // Notify the consumer that an item is produced
	                Thread.sleep(1000); // Simulate some work
	            }
	        }
	    }

	    public void consume() throws InterruptedException {
	        while (true) {
	            synchronized (this) {
	                while (buffer.isEmpty()) {
	                    // Buffer is empty, wait for the producer to produce
	                    wait();
	                }

	                int item = buffer.removeFirst();
	                System.out.println("Consumer consumes: " + item);
	                notify(); // Notify the producer that an item is consumed
	                Thread.sleep(1000); // Simulate some work
	            }
	        }
	    }
	}

	public class five {
	    public static void main(String[] args) {
	        SharedBuffer sharedBuffer = new SharedBuffer(5);

	        Thread producerThread = new Thread(() -> {
	            try {
	                sharedBuffer.produce();
	            } catch (InterruptedException e) {
	                e.printStackTrace();
	            }
	        });

	        Thread consumerThread = new Thread(() -> {
	            try {
	                sharedBuffer.consume();
	            } catch (InterruptedException e) {
	                e.printStackTrace();
	            }
	        });

	        producerThread.start();
	        consumerThread.start();
	    }
	}


